```{r}
install.packages("shiny")
install.packages("DT")
 


```

```{r}
library(shiny)
library(DT)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(here)



```




```{r}
ui <- fluidPage(    # Definimos una página en blanco
  
  titlePanel("Datos de Precios de Viviendas"),   # Título
  sidebarLayout(    # Definimos la estructura
    sidebarPanel(   # Lo usamos para colocar los selectInput
      
      selectInput('varcolor', 'Variables influyentes en el precio',   # Definimos un input llamado varcolor que permitira la selección de las columnas del dataframe 
                  
                  c("municipio", "condicion", "tipo vivienda", "a")), # Ponemos las categorías de la lista desplegable del sidebarPanel
      
      conditionalPanel( # Definimos un input llamado digitos para seleccionar la cantidad de decimales en el panel
        condition = "input.tabselected == 1", # Que el input de cantidad de decimales aparezca solo en la página de Bivariado y no en la de Univariado
        
        selectInput('digitos', 'otro',  
                    choices = c(0, 1, 2), selected = 2) # Ponemos los valores posibles para los decimales, y cargamos por defecto el valor de 2
      
      )
    ),
    mainPanel(  # Panel para las pestañas donde se veran los gráficos
      tabsetPanel( # Pestañas posibles que vamos a mostrar, en este caso dos
        id = "tabselected",  # Identificar el panel
        tabPanel("Municipio",   # Primera pestaña llada Bivariado
                 value = 1,     # Valor de 1
                 h2("Gráfico 1", align = "center"), # Título del gráfico que estara dentro de esta pestaña
                 plotOutput("scat"), # Asociamos el gráfico a un elemento llamado scat
                 DTOutput("tabla")), # Asociamos la tabla a un elemento llamado tabla
        
        tabPanel("Ceros y Unos",  # Creamos otra pestaña llamada Univariado

                 h2("Diagrama Univariado", align = "center"), # Título del gráfico que estara dentro de esta pestaña
                 plotOutput("Barras_Univariado")),
                 
                 
        tabPanel("Mapa",  # Creamos otra pestaña llamada Univariado

                 h2("Diagrama Univariado", align = "center"), # Título del gráfico que estara dentro de esta pestaña
                 plotOutput("Barras_Univariado"))   # Asociamos este gráfico a un elemento llamdo Barras_Univariado# Asociamos este gráfico a un elemento llamdo Barras_Univariado
      )
    )
  )
)

server <- function(input, output){  # Activamos el server
  output$scat <- renderPlot({  # Creamos el gráfico en base al input asociado llamado scat
    ggplot(data = propinas,   # Datos
           
           aes(x = total, y = propina, colour = .data[[input$varcolor]] )) +
       # Ejes y color (donde para el color usamos el argumento de .data[[input$varcolor]] que permitira la selección de columnas para dar color al gráfico, dando así reactividad)
    
      geom_point() + theme(aspect.ratio = 1) + # Gráfico de puntos
      scale_x_continuous(name ="Total de la cuenta") + # Nombre del eje X
      scale_y_continuous(name = "Propina")             # Nombre del eje Y
  })
  
  output$tabla <- renderDT({ # Creamos la tabla en base al input asociado llamado tabla

    summary_data <- propinas %>%  # Datos
      
      group_by(.data[[input$varcolor]]) %>% # Agrupamos por columnas, en este caso variaremos las columnas con el argumento .data[[input$varcolor]] para dar reactividad  y agrupar con la columna que seleccione el usuario

      summarise(  # Resumen (sin nulos)
        mean_propina = mean(propina, na.rm = TRUE), # Media de  propina 
        sd_propina = sd(propina, na.rm = TRUE),     # Desvio de propina
        mean_total = mean(total, na.rm = TRUE),     # Media total
        sd_total = sd(total, na.rm = TRUE)          # Desvio total
      ) %>%
      summarise(across(where(is.numeric), round, as.integer(input$digitos)))
    # Resumimos seleccionando con across solo las columnas cuando sean numericas usando una combinación de where y is.numeric, usamos la función de round. Finalmente convertimos a enteros el input de digitos que habiamos definido para que al cambiar los valores de decimales en el panel, se cambie de forma reactiva en la tabla
  
    
    
  })

  output$Barras_Univariado <- renderPlot({ # Creamos el gráfico en base al input asociado llamado Barras_Univariado

    ggplot(data = propinas,  # Datos
           aes(x = .data[[input$varcolor]])) + # Eje X que depende del argumento .data[[input$varcolor]] que permitira la selección de columnas para gráficar en el eje X y haciendo su frecuencia en el eje Y, dando así reactividad)
    
      geom_bar() +  # Gráfico de barras, que tiene por defecto la frecuencia en el eje Y
      theme(aspect.ratio = 1) + # Aspecto del gráfico
      scale_x_discrete(name = input$varcolor) + # Nombre del eje X que depende de varcolor, que son las posibles columnas de sexo, fuma, dia y momento.
      scale_y_continuous(name = "Frecuencia") # Nombre del eje Y
  })
}

# Resultados
shinyApp(ui, server)
```



```{r}

ui <- fluidPage(
  titlePanel("Datos de Precios de Viviendas"),
  sidebarLayout(
    sidebarPanel(
      selectInput('varcolor', 'Variables influyentes en el precio',
                  c("municipio", "condicion", "tipo vivienda", "a")),
      conditionalPanel(
        condition = "input.tabselected == 1",
        selectInput('digitos', 'otro',
                    choices = c(0, 1, 2), selected = 2),
        selectInput('x_axis', 'Seleccione el eje X:',
                    choices = c("Municipio" = "Municipio",
                                "Tipo de Propiedad" = "tipo_prop",
                                "Condición" = "Condicion")),
        actionButton('update', 'Actualizar Gráficos')
      )
    ),
    mainPanel(
      tabsetPanel(
        id = "tabselected",
        tabPanel("Municipio",
                 value = 1,
                 h2("Gráfico 1", align = "center"),
                 plotOutput("barPlot"),
                 DTOutput("tabla")),
        tabPanel("Ceros y Unos",
                 h2("Diagrama Univariado", align = "center"),
                 plotOutput("Barras_Univariado")),
        tabPanel("Mapa",
                 h2("Diagrama Univariado", align = "center"),
                 plotOutput("Barras_Univariado"))
      )
    )
  )
)

# Define el servidor (server)
server <- function(input, output, session) {
  datos_2 <- data.frame(
    Municipio = sample(c("Municipio1", "Municipio2", "Municipio3"), 100, replace = TRUE),
    tipo_prop = sample(c("Casa", "Apartamento", "Condominio"), 100, replace = TRUE),
    Condicion = sample(c("Nueva", "Usada", "Renovada"), 100, replace = TRUE)
  )

  observeEvent(input$update, {
    output$barPlot <- renderPlot({
      x_axis <- switch(input$x_axis,
                       "Municipio" = "Municipio",
                       "Tipo de Propiedad" = "tipo_prop",
                       "Condición" = "Condicion")

      grupo_datos <- datos_2 %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(Cantidad = n(), .groups = 'drop')

      ggplot(grupo_datos, aes_string(x = x_axis, y = "Cantidad")) +
        geom_bar(stat = "identity") +
        labs(x = input$x_axis, y = "Cantidad") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })

  output$scat <- renderPlot({
    ggplot(data = datos_2,
           aes(x = total, y = propina, colour = .data[[input$varcolor]])) +
      geom_point() + theme(aspect.ratio = 1) +
      scale_x_continuous(name = "Total de la cuenta") +
      scale_y_continuous(name = "Propina")
  })

  output$tabla <- renderDT({
    summary_data <- datos_2 %>%
      group_by(.data[[input$varcolor]]) %>%
      summarise(
        mean_propina = mean(propina, na.rm = TRUE),
        sd_propina = sd(propina, na.rm = TRUE),
        mean_total = mean(total, na.rm = TRUE),
        sd_total = sd(total, na.rm = TRUE)
      ) %>%
      summarise(across(where(is.numeric), round, as.integer(input$digitos)))

    datatable(summary_data)
  })

  output$Barras_Univariado <- renderPlot({
    ggplot(data = datos_2,
           aes(x = .data[[input$varcolor]])) +
      geom_bar() +
      theme(aspect.ratio = 1) +
      scale_x_discrete(name = input$varcolor) +
      scale_y_continuous(name = "Frecuencia")
  })
}

# Ejecuta la aplicación Shiny
shinyApp(ui = ui, server = server)


```





```{r}
# Poner el gráfico de barras básicos que grafique 



```



```{r}
ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      actionButton("update", "Actualizar Gráficos"),
      selectInput("x_axis", "Seleccione el eje X:", 
                  choices = list("Municipio" = "Municipio", 
                                 "Tipo de Propiedad" = "tipo_prop", 
                                 "Condición" = "Condicion"))
    ),
    mainPanel(
      plotOutput("barPlot")
    )
  )
)

# Define el servidor (server)
server <- function(input, output, session) {
  
  observeEvent(input$update, {
    output$barPlot <- renderPlot({
      datos_2 <- data.frame(
        Municipio = sample(c("Municipio1", "Municipio2", "Municipio3"), 100, replace = TRUE),
        tipo_prop = sample(c("Casa", "Apartamento", "Condominio"), 100, replace = TRUE),
        Condicion = sample(c("Nueva", "Usada", "Renovada"), 100, replace = TRUE)
      )
      
      x_axis <- switch(input$x_axis,
                       "Municipio" = "Municipio",
                       "tipo_prop" = "tipo_prop",
                       "Condicion" = "Condicion")
      
      grupo_datos <- datos_2 %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(Cantidad = n(), .groups = 'drop')
      
      ggplot(grupo_datos, aes_string(x = x_axis, y = "Cantidad")) +
        geom_bar(stat = "identity") +
        labs(x = input$x_axis, y = "Cantidad") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })
}


shinyApp(ui = ui, server = server)




```






```{r}
#
#
#
ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      actionButton("update", "Actualizar Gráficos"),
      selectInput("x_axis", "Seleccione el eje X:", 
                  choices = list("Municipio" = "Municipio", 
                                 "Tipo de Propiedad" = "tipo_prop", 
                                 "Condición" = "Condicion"))
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Datos1",
                 plotOutput("barPlot")
        ),
        tabPanel("Datos2",
                 h2("Contenido de Datos2")
        ),
        tabPanel("Mapa",
                 h2("Contenido de Mapa")
        )
      )
    )
  )
)

# Define el servidor (server)
server <- function(input, output, session) {
  
  observeEvent(input$update, {
    output$barPlot <- renderPlot({
      datos_2 <- data.frame(
        Municipio = sample(c("Municipio1", "Municipio2", "Municipio3"), 100, replace = TRUE),
        tipo_prop = sample(c("Casa", "Apartamento", "Condominio"), 100, replace = TRUE),
        Condicion = sample(c("Nueva", "Usada", "Renovada"), 100, replace = TRUE)
      )
      
      x_axis <- switch(input$x_axis,
                       "Municipio" = "Municipio",
                       "tipo_prop" = "tipo_prop",
                       "Condicion" = "Condicion")
      
      grupo_datos <- datos_2 %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(Cantidad = n(), .groups = 'drop')
      
      ggplot(grupo_datos, aes_string(x = x_axis, y = "Cantidad")) +
        geom_bar(stat = "identity") +
        labs(x = input$x_axis, y = "Cantidad") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })
}

# Ejecuta la aplicación Shiny
shinyApp(ui = ui, server = server)



```




```{r}

ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      actionButton("update", "Actualizar Gráficos"),
      selectInput("x_axis", "Seleccione el eje X:", 
                  choices = list("Municipio" = "Municipio", 
                                 "Tipo de Propiedad" = "tipo_prop", 
                                 "Condición" = "Condicion"))
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Datos1",
                 h2("Gráfico de Datos1"),
                 plotOutput("barPlot")
        ),
        tabPanel("Datos2",
                 h2("Gráfico de Datos2")
        ),
        tabPanel("Mapa",
                 h2("Gráfico de Mapa")
        )
      )
    )
  )
)

# Define el servidor (server)
server <- function(input, output, session) {
  
  observeEvent(input$update, {
    output$barPlot <- renderPlot({
      datos_2 <- data.frame(
        Municipio = sample(c("Municipio1", "Municipio2", "Municipio3"), 100, replace = TRUE),
        tipo_prop = sample(c("Casa", "Apartamento", "Condominio"), 100, replace = TRUE),
        Condicion = sample(c("Nueva", "Usada", "Renovada"), 100, replace = TRUE)
      )
      
      x_axis <- switch(input$x_axis,
                       "Municipio" = "Municipio",
                       "tipo_prop" = "tipo_prop",
                       "Condicion" = "Condicion")
      
      grupo_datos <- datos_2 %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(Cantidad = n(), .groups = 'drop')
      
      ggplot(grupo_datos, aes_string(x = x_axis, y = "Cantidad")) +
        geom_bar(stat = "identity") +
        labs(x = input$x_axis, y = "Cantidad") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })
}

# Ejecuta la aplicación Shiny
shinyApp(ui = ui, server = server)



```
# Introducción

```{r}
install.packages("shiny")
install.packages("DT")
 


```


```{r}
library(shiny)
library(DT)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(here)


```


```{r}


# Datos sobre precio de casas
datos <- read_csv(here("houses.csv"))
datos

```

```{r}
# Renombrabos las columnas de ingles a español
datos <- datos|>
  rename(precio = Price,
         nro_de_piso = Floor,
         cant_de_piso = Number_of_Floors,
         Gastos_Comunes = Common_Expenses,
         apartamentos_por_piso = Apartments_per_Floor,
         zona = Zone,
         Condicion = Condition,
         disposicion = Disposition,
         cant_cuartos = Bedrooms...18,
         cant_habitaciones = Bedrooms...13,
         año_de_const = Year_of_Construction,
         vista_al_mar = Sea_View,
         deposito = Storage,
         jardin = Garden,
         losa_radiante = Radiant_Floor_Heating,
         amueblado = Furnished...45,
         direccion = Address,
         tipo_prop = Property_Type,
         baños = Bathrooms,
         m2_const = Built_Square_Meters,
         m2_totales = Land_Square_Meters,
         m2_terraza = Terrace_Square_Meters,
         vivienda_social = Social_Housing,
         cant_de_est = Garages,
         coneccion_cas = Gas_Pipeline,
         calefaccion = Heating,
         zona_barbacoa = Grill,
         balcon = Balcony
         )


datos

```

2)  Poner columna de precio por metro cuadrado

```{r}
# Pasar el precio a precio por metro cuadrado
datos <- datos|>
  mutate(precio_m2 = precio/m2_const)

datos

```

3)  Eliminar columnas inecesarias

```{r}
# Eliminamos columnas innecesarias
 datos <- 
   datos|>
    select(-Furnished...32, -Furnished...42, -Floors)#

datos
 

```







```{r}
ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      actionButton("update", "Actualizar Gráficos"),
      selectInput("x_axis", "Seleccione el eje X:", 
                  choices = list("Metros Cuadrados por Construcción" = "m2_const", 
                                 "Metros por Terraza" = "m2_terraza", 
                                 "Metros Cuadrados por Tierra" = "m2_totales"))
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Datos1",
                 h2("Gráfico de Datos1"),
                 plotOutput("barPlot")
        ),
        tabPanel("Metros cuadrados",
                 h2("Gráfico de Datos2"),
                 plotOutput("scatterPlot")
        ),
        tabPanel("Mapa",
                 h2("Gráfico de Mapa")
        )
      )
    )
  )
)

# Define el servidor (server)
server <- function(input, output, session) {
  
  observeEvent(input$update, {
    # Actualizar gráfico en la pestaña Datos1
    output$barPlot <- renderPlot({
      datos_2 <- data.frame(
      #   Municipio = sample(c("Municipio1", "Municipio2", "Municipio3"), 100, replace = TRUE),
      #   tipo_prop = sample(c("Casa", "Apartamento", "Condominio"), 100, replace = TRUE),
      #   Condicion = sample(c("Nueva", "Usada", "Renovada"), 100, replace = TRUE)
       )
      
      x_axis <- switch(input$x_axis,
                       "Metros Cuadrados por Construcción" = "m2_const",
                       "Metros por Terraza" = "m2_terraza",
                       "Metros Cuadrados por Tierra" = "m2_totales")
      
      grupo_datos <- datos_2 %>% 
        group_by(across(all_of(x_axis))) %>%
        summarise(Cantidad = n(), .groups = 'drop')
      
      ggplot(grupo_datos, aes_string(x = x_axis, y = "Cantidad")) +
        geom_bar(stat = "identity") +
        labs(x = input$x_axis, y = "Cantidad") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
    
    # Actualizar gráfico en la pestaña Datos2
    output$scatterPlot <- renderPlot({
      # datos_2 <- data.frame(
      #   m2_const = runif(100, 50, 200),
      #   m2_terraza = runif(100, 10, 50),
      #   m2_totales = runif(100, 100, 500),
      #   precio = runif(100, 100000, 500000)
      # )
      
      x_axis <- input$x_axis
      # GRÁFICO DE LOS METROS CUADRADOS
      ggplot(datos_2, aes_string(x = x_axis, y = "precio")) + 
        geom_point() +
        labs(x = x_axis, y = "Precio") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })
}

# Ejecuta la aplicación Shiny
shinyApp(ui, server)




```




```{r}

ui <- fluidPage(                  # Definimos una página en blanco
  titlePanel("Datos de Propina"), # Título
  sidebarLayout(                  # Definimos la estructura
    sidebarPanel(                 # Lo usamos para colocar los selectInput
      conditionalPanel(           # Panel condicional
        condition = "input.tabselected == 1",  # Este panel estara solo en la pestaña 1, que es la Bivariada, donde tiene sentido el mostrar o ocultar.
        
        selectInput('varcolor', 'Variable en color',  # Definimos un elemento llamado varcolor que permitira la selección de las columnas del dataframe 
                    c("sexo", "fuma", "dia", "momento")), # Ponemos las categorías de la lista desplegable en el panel
      
        selectInput('digitos', 'Cantidad de decimales',    # Definimos un input llamado digitos para seleccionar la cantidad de decimales en el panel
                    choices = c(0, 1, 2), selected = 2), # Ponemos los valores posibles para los decimales, y cargamos por defecto el valor de 2
        
        actionButton("showBivariado", "Ver gráfico y tabla"), # Creamos el boton que nos servira para ver el gráfico y la tabla
        actionButton("hideBivariado", "Ocultar gráfico y tabla")  # Creamos el boton que nos servira para ocultar el gráfico y la tabla
        
      ),
      conditionalPanel(                       # El otro panel Condicional 
        condition = "input.tabselected == 2", # Este panel sera el que aparecera cuando seleccionemos la segunda pestaña, es decir, la de Univariado
        selectInput('varbarras', 'Variable para barras',  # Título del panel 
                    c("sexo", "fuma", "dia", "momento"))  # Opciones desplegables para elegir en el panel
        
      ),
      conditionalPanel( # Creamos otro panel condicional que estara asociado al panel de Ver Gráfico y tabla
        condition = "output.showPanel && input.tabselected == 1", # En caso de que seleccionemos el boton de 
        actionButton("toggleTable", "Mostrar/Ocultar tabla")
      )
    ),
    mainPanel(       # Panel para las pestañas donde se veran los gráficos
      tabsetPanel(   # Pestañas posibles que vamos a mostrar, en este caso dos
        id = "tabselected",     # Identificar el panel
        tabPanel("Bivariado",   # Primera pestaña llada Bivariado
                 value = 1,
                 h2("Diagrama de dispersión", align = "center"), # Título del gráfico que estara dentro de esta pestaña
                 plotOutput("scat"),  # Asociamos el gráfico a un elemento llamado scat
                 DTOutput("tabla")),  # Asociamos la tabla a un elemento llamado tabla
        tabPanel("Univariado", # Creamos otra pestaña llamada Univariado
                 value = 2,
                 h2("Diagrama Univariado", align = "center"), # Título del gráfico que estara dentro de esta pestaña
                 plotOutput("Barras_Univariado"))  # Asociamos este gráfico a un elemento llamdo Barras_Univariado
      )
    )
  )
)

server <- function(input, output, session){  # Activamos el server
  
  # Cuando tocamos el boton de 
  showPanel <- reactiveVal(FALSE)   # Hacemos que el gráfico siga apareciendo
  showTable <- reactiveVal(TRUE)    # Hacemos que la tabla no se vea
  
  observeEvent(input$showBivariado, { # Código que se activara cuando toquemos el boton de "Ver gráfico y tabla"
    showPanel(TRUE) # Este gráfico se seguirá mostrando cuando activemos el boton de "Mostrar/Ocultar tabla"
    output$scat <- renderPlot({ # Gráfico en base al elemento llamado scat
      ggplot(data = propinas,   # Datos
             aes(x = total, y = propina, colour = .data[[input$varcolor]] )) +
  # Ejes y color (donde para el color usamos el argumento de .data[[input$varcolor]] que permitira la selección de columnas para dar color al gráfico, dando así reactividad)
            
        
        geom_point() + theme(aspect.ratio = 1) + # Gráfico de puntos y aspecto
        scale_x_continuous(name ="Total de la cuenta") + # Nombre del eje X
        scale_y_continuous(name = "Propina")             # Nombre del eje Y
    })
     
    output$tabla <- renderDT({ # Creamos la tabla en base al input asociado llamado tabla
 
      summary_data <- propinas %>%  # Datos
        group_by(.data[[input$varcolor]]) %>% # Agrupamos por columnas, en este caso variaremos las columnas con el argumento .data[[input$varcolor]] para dar reactividad  y agrupar con la columna que seleccione el usuario

        summarise(   # Resumen (sin nulos)
          mean_propina = mean(propina, na.rm = TRUE),  # Media de  propina 
          sd_propina = sd(propina, na.rm = TRUE),      # Desvio de propina
          mean_total = mean(total, na.rm = TRUE),      # Media total
          sd_total = sd(total, na.rm = TRUE)           # Desvio total
        ) %>%
        summarise(across(where(is.numeric), round, as.integer(input$digitos)))
      # Resumimos seleccionando con across solo las columnas cuando sean numericas usando una combinación de where y is.numeric, usamos la función de round. Finalmente convertimos a enteros el input de digitos que habiamos definido para que al cambiar los valores de decimales en el panel, se cambie de forma reactiva en la tabla
          })
  })
  
  observeEvent(input$hideBivariado, {  # Ponemos lo que aparecera en caso de que elijamos el boton de "Ocultar Gráfico y Tabla" asociado a hideBivariado
    showPanel(FALSE)   # Que no aparezca el boton de Mostrar/Ocultar tabla
    output$scat <- renderPlot(NULL)       # Hacemos que el gráfico no aparezca
    output$tabla <- renderDT(NULL) # Hacemos que la tabla no aparezca
  })

  observeEvent(input$toggleTable, { # Definimos la reactividad de la tabla 
    showTable(!showTable()) # Esto lo ponemos para que aparezca y desaparezca la tabla
    if (showTable()) {   # En el caso de seleccionar el boton de "Ver grafico y tabla"
      output$tabla <- renderDT({ # Mostramos la tabla
        summary_data <- propinas %>%  # Datos
          group_by(.data[[input$varcolor]]) %>%  # Agrupamos por columnas, en este caso variaremos las columnas con el argumento .data[[input$varcolor]] para dar reactividad  y agrupar con la columna que seleccione el usuario

          summarise( # Resumen (sin nulos)
            mean_propina = mean(propina, na.rm = TRUE), # Media de  propina 
            sd_propina = sd(propina, na.rm = TRUE),     # Desvio de propina
            mean_total = mean(total, na.rm = TRUE),     # Media total
            sd_total = sd(total, na.rm = TRUE)          # Desvio total
          ) %>%
        summarise(across(where(is.numeric), round, as.integer(input$digitos)))
  # Resumimos seleccionando con across solo las columnas cuando sean numericas usando una combinación de where y is.numeric, usamos la función de round. Finalmente convertimos a enteros el input de digitos que habiamos definido para que al cambiar los valores de decimales en el panel, se cambie de forma reactiva en la tabla
  
        
      })
    } else {
      output$tabla <- renderDT(NULL) # En caso de que volvamos a tocar el boton, la tabla desaparece.
    }
  })
  
  output$Barras_Univariado <- renderPlot({ # Creamos el gráfico en base al input asociado llamado Barras_Univariado

    ggplot(data = propinas, # Datos
           aes(x = .data[[input$varbarras]])) + # Eje X que depende del argumento .data[[input$varcolor]] que permitira la selección de columnas para gráficar en el eje X y haciendo su frecuencia en el eje Y, dando así reactividad)
      geom_bar() +  # Gráfico de barras, que tiene por defecto la frecuencia en el eje Y
      theme(aspect.ratio = 1) + # Aspecto del gráfico
      scale_x_discrete(name = input$varbarras) +  # Nombre del eje X que depende de varcolor, que son las posibles columnas de sexo, fuma, dia y momento.
      scale_y_continuous(name = "Frecuencia") # Nombre del eje Y
  })
  
  output$showPanel <- reactive({showPanel()}) # Damos reactividad con el boton de Ver gráfico y tabla
  outputOptions(output, "showPanel", suspendWhenHidden = FALSE) # Hacemos que cuando seleccionemos el boton de Mostrar/Ocultar tabla la tabla desaparesca
} 


# Resultados
shinyApp(ui, server)

```




Avance correcto
```{r}
# Define la UI (user interface)
ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      conditionalPanel(
        condition = "input.tabselected == 1",
        actionButton("update_datos1", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 2",
        selectInput("x_axis", "Seleccione el eje X:", 
                    choices = list("Metros Cuadrados por Construcción" = "m2_const", 
                                   "Metros por Terraza" = "m2_terraza", 
                                   "Metros Cuadrados por Tierra" = "m2_totales")),
        actionButton("update_datos2", "Actualizar Gráficos")
      )
    ),
    mainPanel(
      tabsetPanel(id = "tabselected",
        tabPanel("Datos1",
                 h2("Gráfico de Datos1"),
                 plotOutput("barPlot"),
                 value = 1
        ),
        tabPanel("Datos2",
                 h2("Gráfico de Datos2"),
                 plotOutput("scatterPlot"),
                 value = 2
        ),
        tabPanel("Mapa",
                 h2("Gráfico de Mapa"),
                 value = 3
        )
      )
    )
  )
)

# Define el servidor (server)
server <- function(input, output, session) {
  
  observeEvent(input$update_datos1, {
    # Actualizar gráfico en la pestaña Datos1
    output$barPlot <- renderPlot({
      datos_3 <- data.frame(
        Municipio = sample(c("Municipio1", "Municipio2", "Municipio3"), 100, replace = TRUE),
        tipo_prop = sample(c("Casa", "Apartamento", "Condominio"), 100, replace = TRUE),
        Condicion = sample(c("Nueva", "Usada", "Renovada"), 100, replace = TRUE)
      )
      
      x_axis <- "Municipio"
      
      grupo_datos <- datos_3 %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(Cantidad = n(), .groups = 'drop')
      
      ggplot(grupo_datos, aes_string(x = x_axis, y = "Cantidad")) +
        geom_bar(stat = "identity") +
        labs(x = x_axis, y = "Cantidad") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })
  
  observeEvent(input$update_datos2, {
    # Actualizar gráfico en la pestaña Datos2
    output$scatterPlot <- renderPlot({
      # datos_2 <- data.frame(
      #   m2_const = runif(100, 50, 200),
      #   m2_terraza = runif(100, 10, 50),
      #   m2_totales = runif(100, 100, 500),
      #   precio = runif(100, 100000, 500000)
      # )
      
      x_axis <- input$x_axis
      
      ggplot(datos_2, aes_string(x = x_axis, y = "precio")) + 
        geom_point() +
        labs(x = x_axis, y = "Precio") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })
}

# Ejecuta la aplicación Shiny
shinyApp(ui = ui, server = server)
```







```{r}
ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      conditionalPanel(
        condition = "input.tabselected == 1",
        selectInput("x_axis_datos1", "Seleccione el eje X:", 
                    choices = list("Baños" = "baños", 
                                   "Habitaciones" = "cant_habitaciones", 
                                   "Cuartos" = "cant_cuartos",
                                   "Garages" = "cant_de_est")),
        actionButton("update_datos1", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 2",
        selectInput("x_axis_datos2", "Seleccione el eje X:", 
                    choices = list("Metros Cuadrados por Construcción" = "m2_const", 
                                   "Metros por Terraza" = "m2_terraza", 
                                   "Metros Cuadrados por Tierra" = "m2_totales")),
        actionButton("update_datos2", "Actualizar Gráficos")
      )
    ),
    mainPanel(
      tabsetPanel(id = "tabselected",
        tabPanel("Datos1",
                 h2("Gráfico de Datos1"),
                 plotOutput("barPlot"),
                 value = 1
        ),
        tabPanel("Datos2",
                 h2("Gráfico de Datos2"),
                 plotOutput("scatterPlot"),
                 value = 2
        ),
        tabPanel("Mapa",
                 h2("Gráfico de Mapa"),
                 value = 3
        )
      )
    )
  )
)

# Define el servidor (server)
server <- function(input, output, session) {
  
  observeEvent(input$update_datos1, {
    # Actualizar gráfico en la pestaña Datos1
    output$barPlot <- renderPlot({
      datos <- data.frame(
        baños = sample(1:4, 100, replace = TRUE),
        cant_habitaciones = sample(1:5, 100, replace = TRUE),
        cant_cuartos = sample(1:7, 100, replace = TRUE),
        cant_de_est = sample(0:3, 100, replace = TRUE),
        precio = runif(100, 100000, 500000)
      )
      
      x_axis <- input$x_axis_datos1
      
      # Calcular la media de precios
      datos_resumidos <- datos %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(media_precio = mean(precio), .groups = 'drop')
      
      # Gráfico de barras para cantidad de elementos
      p1 <- ggplot(datos, aes_string(x = x_axis)) + 
        geom_bar() +
        scale_x_continuous(breaks = datos_resumidos[[x_axis]]) +
        labs(x = x_axis, y = "Cantidad")
      
      # Gráfico de barras para media de precios
      p2 <- ggplot(datos_resumidos, aes_string(x = x_axis, y = "media_precio")) + 
        geom_bar(stat = "identity") +
        scale_x_continuous(breaks = datos_resumidos[[x_axis]]) +
        labs(x = x_axis, y = "Media Precio")
      
      # Mostrar ambos gráficos juntos
      gridExtra::grid.arrange(p1, p2, nrow = 2)
    })
  })
  
  observeEvent(input$update_datos2, {
    # Actualizar gráfico en la pestaña Datos2
    output$scatterPlot <- renderPlot({
      datos_2 <- data.frame(
        m2_const = runif(100, 50, 200),
        m2_terraza = runif(100, 10, 50),
        m2_totales = runif(100, 100, 500),
        precio = runif(100, 100000, 500000)
      )
      
      x_axis <- input$x_axis_datos2
      
      ggplot(datos_2, aes_string(x = x_axis, y = "precio")) + 
        geom_point() +
        labs(x = x_axis, y = "Precio") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })
}

# Ejecuta la aplicación Shiny
shinyApp(ui = ui, server = server)


```   



```{r}




```


```{r}

ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      conditionalPanel(
        condition = "input.tabselected == 1",
        selectInput("x_axis_datos1", "Seleccione el eje X:", 
                    choices = list("Baños" = "baños", 
                                   "Habitaciones" = "cant_habitaciones", 
                                   "Cuartos" = "cant_cuartos",
                                   "Garages" = "cant_de_est")),
        actionButton("update_datos1", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 2",
        selectInput("x_axis_datos2", "Seleccione el eje X:", 
                    choices = list("Metros Cuadrados por Construcción" = "m2_const", 
                                   "Metros por Terraza" = "m2_terraza", 
                                   "Metros Cuadrados por Tierra" = "m2_totales")),
        actionButton("update_datos2", "Actualizar Gráficos")
      )
    ),
    mainPanel(
      tabsetPanel(id = "tabselected",
        tabPanel("Datos1",
                 h2("Gráfico de Datos1"),
                 plotOutput("barPlot"),
                 value = 1
        ),
        tabPanel("Datos2",
                 h2("Gráfico de Datos2"),
                 plotOutput("scatterPlot"),
                 value = 2
        ),
        tabPanel("Mapa",
                 h2("Gráfico de Mapa"),
                 value = 3
        )
      )
    )
  )
)

# Define el servidor (server)
server <- function(input, output, session) {
  
  observeEvent(input$update_datos1, {
    # Actualizar gráfico en la pestaña Datos1
    output$barPlot <- renderPlot({
      # Datos simulados (reemplazar con tu dataframe original)
      # datos <- data.frame(
      #   baños = sample(1:4, 100, replace = TRUE),
      #   cant_habitaciones = sample(1:5, 100, replace = TRUE),
      #   cant_cuartos = sample(1:7, 100, replace = TRUE),
      #   cant_de_est = sample(0:3, 100, replace = TRUE),
      #   precio = runif(100, 100000, 500000)
      # )
      
      x_axis <- input$x_axis_datos1
      
      # Seleccionar las columnas relevantes
      datos <- datos %>% select(all_of(c(x_axis, "precio")))
      
      # Calcular la media de precios
      datos_resumidos <- datos %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(media_precio = mean(precio), .groups = 'drop')
      
      # Gráfico de barras para cantidad de elementos
      p1 <- ggplot(datos, aes_string(x = x_axis)) + 
        geom_bar() +
        scale_x_continuous(breaks = datos_resumidos[[x_axis]]) +
        labs(x = x_axis, y = "Cantidad")
      
      # Gráfico de barras para media de precios
      p2 <- ggplot(datos_resumidos, aes_string(x = x_axis, y = "media_precio")) + 
        geom_bar(stat = "identity") +
        scale_x_continuous(breaks = datos_resumidos[[x_axis]]) +
        labs(x = x_axis, y = "Media Precio")
      
      # Mostrar ambos gráficos juntos
      gridExtra::grid.arrange(p1, p2, nrow = 2)
    })
  })
  
  observeEvent(input$update_datos2, {
    # Actualizar gráfico en la pestaña Datos2
    output$scatterPlot <- renderPlot({
      # Datos simulados (reemplazar con tu dataframe original)
      # datos_2 <- data.frame(
      #   m2_const = runif(100, 50, 200),
      #   m2_terraza = runif(100, 10, 50),
      #   m2_totales = runif(100, 100, 500),
      #   precio = runif(100, 100000, 500000)
      # )
      # 
      datos_2 <- datos
      x_axis <- input$x_axis_datos
      
      # Seleccionar las columnas relevantes
      datos_2 <- datos_2 %>% select(all_of(c(x_axis, "precio")))
      
      ggplot(datos_2, aes_string(x = x_axis, y = "precio")) + 
        geom_point() +
        labs(x = x_axis, y = "Precio") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })
}

# Ejecuta la aplicación Shiny
shinyApp(ui = ui, server = server)


``` 









```{r}

datos <- datos %>% filter(m2_const < 3000 &  m2_totales < 5000 & precio < 15000)



``` 





Posiblmente correcto
```{r}

ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      conditionalPanel(
        condition = "input.tabselected == 1",
        selectInput("x_axis_datos1", "Seleccione el eje X:", 
                    choices = list("Baños" = "baños", 
                                   "Habitaciones" = "cant_habitaciones", 
                                   "Cuartos" = "cant_cuartos",
                                   "Garages" = "cant_de_est")),
        actionButton("update_datos1", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 2",
        selectInput("x_axis_datos2", "Seleccione el eje X:", 
                    choices = list("Metros Cuadrados por Construcción" = "m2_const", 
                                   "Metros por Terraza" = "m2_terraza", 
                                   "Metros Cuadrados por Tierra" = "m2_totales")),
        actionButton("update_datos2", "Actualizar Gráficos")
      )
    ),
    mainPanel(
      tabsetPanel(id = "tabselected",
        tabPanel("Datos1",
                 h2("Gráfico de Datos1"),
                 plotOutput("barPlot"),
                 value = 1
        ),
        tabPanel("Datos2",
                 h2("Gráfico de Datos2"),
                 plotOutput("scatterPlot"),
                 value = 2
        ),
        tabPanel("Mapa",
                 h2("Gráfico de Mapa"),
                 value = 3
        )
      )
    )
  )
)

# Define el servidor (server)
server <- function(input, output, session) {
  
  observeEvent(input$update_datos1, {
    # Actualizar gráfico en la pestaña Datos1
    output$barPlot <- renderPlot({
      # Datos simulados (reemplazar con tu dataframe original)
      # datos <- data.frame(
      #   baños = sample(1:4, 100, replace = TRUE),
      #   cant_habitaciones = sample(1:5, 100, replace = TRUE),
      #   cant_cuartos = sample(1:7, 100, replace = TRUE),
      #   cant_de_est = sample(0:3, 100, replace = TRUE),
      #   precio = runif(100, 100000, 500000)
      # )
      
      x_axis <- input$x_axis_datos1
      
      # Seleccionar las columnas relevantes
      datos <- datos %>% select(all_of(c(x_axis, "precio")))
      
      # Calcular la media de precios
      datos_resumidos <- datos %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(media_precio = mean(precio), .groups = 'drop')
      
      # Gráfico de barras para cantidad de elementos
      p1 <- ggplot(datos, aes_string(x = x_axis)) + 
        geom_bar() +
        scale_x_continuous(breaks = datos_resumidos[[x_axis]]) +
        labs(x = x_axis, y = "Cantidad")
      
      # Gráfico de barras para media de precios
      p2 <- ggplot(datos_resumidos, aes_string(x = x_axis, y = "media_precio")) + 
        geom_bar(stat = "identity") +
        scale_x_continuous(breaks = datos_resumidos[[x_axis]]) +
        labs(x = x_axis, y = "Media Precio")
      
      # Mostrar ambos gráficos juntos
      gridExtra::grid.arrange(p1, p2, nrow = 2)
    })
  })
  
  observeEvent(input$update_datos2, {
    # Actualizar gráfico en la pestaña Datos2
    output$scatterPlot <- renderPlot({
      # Datos simulados (reemplazar con tu dataframe original)
      datos_2 <- datos
      # datos_2 <- data.frame(
      #   m2_const = runif(100, 50, 200),
      #   m2_terraza = runif(100, 10, 50),
      #   m2_totales = runif(100, 100, 500),
      #   precio = runif(100, 100000, 500000)
      # )
      
      x_axis <- input$x_axis_datos2
      
      # Seleccionar las columnas relevantes
      datos_2 <- datos_2 %>% select(all_of(c(x_axis, "precio")))
      
      ggplot(datos_2, aes_string(x = x_axis, y = "precio")) + 
        geom_point() +
        labs(x = x_axis, y = "Precio") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })
}

# Ejecuta la aplicación Shiny
shinyApp(ui = ui, server = server)


```