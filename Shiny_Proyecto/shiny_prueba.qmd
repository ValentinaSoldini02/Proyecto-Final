
# Introducción

```{r}
# here()
# library(writexl)
# write_xlsx(datos_2, path = here("Datos","datos_limpios.xlsx"))


```


```{r}
# LIBRERÍAS
library(shiny)
library(DT)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(here)
library(readxl)
#

```


```{r}
# DATOS
#here()
# Datos limpios sobre precio_m2 de casas
here()
#datos <- read_excel(here("Datos","datos_limpios.xlsx"))
#datos


#datos <- read_excel(here("Avances","datos_2.xlsx"))

datos <- read_excel(here("Datos","datos_limpios.xlsx"))
datos

#datos <- read.csv(here("houses.csv"))
#datos

```







Hilo Argumental de la shiny:
Empezamos describiendo los que separamos a las zonas en municipios para mejorar el análisis, 










# correcto

```{r}

# Colores personalizados para el gráfico de municipios
colores_personalizados <- c(
  "Municipio_A" = "red", "Municipio_B" = "blue", "Municipio_C" = "green",
  "Municipio_CH" = "purple", "Municipio_D" = "orange", "Municipio_E" = "pink",
  "Municipio_F" = "brown", "Municipio_G" = "cyan"
)

# UI
ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      conditionalPanel(
        condition = "input.tabselected == 1",
        selectInput("x_axis_datos1", "Seleccione el eje X:",
                    choices = list(
                      "Baños" = "baños",
                      "Habitaciones" = "cant_habitaciones",
                      "Disposición" = "disposicion",
                      "Cuartos" = "cant_cuartos",
                      "Garages" = "cant_de_est")),
        actionButton("update_datos1", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 2",
        selectInput("x_axis_datos2", "Seleccione el eje X:",
                    choices = list(
                      "Metros Cuadrados por Construcción" = "m2_const",
                      "Metros por Terraza" = "m2_terraza",
                      "Metros Cuadrados por Tierra" = "m2_totales")),
        actionButton("update_datos2", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 4",
        selectInput("x_axis_gastos", "Seleccione el eje X para los gráficos de Gastos Comunes:",
                    choices = list(
                      "Tipo de Propiedad" = "tipo_prop",
                      "Disposición" = "disposicion",
                      "Condición" = "Condicion",
                      "Municipio" = "Municipio")),
        actionButton("update_gastos", "Actualizar Gráficos")
      ),
      
      
conditionalPanel(
  condition = "input.tabselected == 5",
  selectInput("x_axis_bernoulli", "Seleccione el eje X para los gráficos de Bernoulli:",
              choices = list(
                "Conexión Gas" = "conexion_gas",
                "WiFi" = "WiFi",
                "Duplex" = "Duplex",
                "Pet" = "Pet",
                "Pool" = "Pool",
                "Gym" = "Gym"
              )),
  actionButton("update_bernoulli", "Actualizar Gráficos")
),
      
      
      
      conditionalPanel(
        condition = "input.tabselected == 6",
        selectInput("x_axis_municipio", "Seleccione el eje X:",
                    choices = list(
                      "Zona" = "zona",
                      "Tipo de Propiedad" = "tipo_prop",
                      "Condición" = "Condicion",
                      "Disposicion"="disposicion")),
        selectInput("single_plot", "Seleccione el Municipio:",
                    choices = unique(datos$Municipio),
                    selected = unique(datos$Municipio)[1]),
        selectInput("zona_plot", "Seleccione la Zona:",
                    choices = NULL),  # Inicialmente vacío
        actionButton("update_municipio", "Actualizar Gráficos")
      ), 
      conditionalPanel(
        condition = "input.tabselected == 7",
        selectInput("x_axis_basicos", "Seleccione el eje X:",
                    choices = list(
                      "Municipio" = "Municipio",
                      "Tipo de Propiedad" = "tipo_prop",
                      "Condición" = "Condicion")),
        actionButton("update_basicos", "Actualizar Gráficos")
      )
    ),
    mainPanel(
      tabsetPanel(id = "tabselected",
                  tabPanel("Datos1",
                           h2("Gráfico de Datos1"),
                           plotOutput("barPlot"),
                           value = 1
                  ),
                  tabPanel("Datos2",
                           h2("Gráfico de Datos2"),
                           plotOutput("scatterPlot"),
                           value = 2
                  ),
                  tabPanel("Mapa",
                           h2("Gráfico de Mapa"),
                           value = 3
                  ),
                  tabPanel("Gastos Comunes",
                           h2("Gráfico de Gastos Comunes"),
                           plotOutput("gastosPlot1"),
                           value = 4
                  ),
                  tabPanel("Bernoulli",
                           h2("Gráfico de Bernoulli"),
                           plotOutput("bernoulliPlot"),
                           value = 5
                  ),
                  tabPanel("Municipio",
                           h2("Gráficos por Municipio"),
                           plotOutput("municipioPlot1"),
                           plotOutput("singleMunicipioPlot"),
                           plotOutput("zonaPlot"),
                           value = 6
                  ),
                  tabPanel("Basicos",
                           h2("Gráficos Básicos"),
                           plotOutput("BasicosPlot"),
                           value = 7
                  )
      )
    )
  )
)

# Server
server <- function(input, output, session) {

  # GRÁFICO DE DATOS 1
  observeEvent(input$update_datos1, {
    output$barPlot <- renderPlot({
      x_axis <- input$x_axis_datos1

      datos_resumidos <- datos %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(media_precio_m2 = mean(precio_m2, na.rm = TRUE), .groups = 'drop')

      p1 <- ggplot(datos, aes_string(x = x_axis)) +
        geom_bar() +
        scale_x_discrete(breaks = unique(datos[[x_axis]])) +
        labs(x = x_axis, y = "Cantidad")

      p2 <- ggplot(datos_resumidos, aes_string(x = x_axis, y = "media_precio_m2")) +
        geom_bar(stat = "identity") +
        scale_x_discrete(breaks = unique(datos_resumidos[[x_axis]])) +
        labs(x = x_axis, y = "Media precio_m2 m2")

      gridExtra::grid.arrange(p1, p2, nrow = 2)
    })
  })

  # GRÁFICO DE DATOS 2
  observeEvent(input$update_datos2, {
    output$scatterPlot <- renderPlot({
      x_axis <- input$x_axis_datos2
      datos_2 <- datos %>% select(all_of(c(x_axis, "precio_m2")))
      ggplot(datos_2, aes_string(x = x_axis, y = "precio_m2")) +
        geom_point() +
        labs(x = x_axis, y = "precio_m2") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })

  # GRÁFICO DE GASTOS COMÚNES
  observeEvent(input$update_gastos, {
    output$gastosPlot1 <- renderPlot({
      x_axis <- input$x_axis_gastos
      ggplot(datos, aes_string(x = x_axis, y = "Gastos_Comunes")) +
        geom_bar(stat="identity") +
        theme(axis.text.x = element_text(angle = 90, hjust = 1))
    })
  })

  # GRÁFICO DE BERNOULLIS
observeEvent(input$update_bernoulli, {
  output$bernoulliPlot <- renderPlot({
    x_axis <- input$x_axis_bernoulli
    
    ggplot(data = datos_4) +
      geom_mosaic(aes_string(x = paste0("product(precio_m2_rec, ", x_axis, ")"), fill= "precio_m2_rec")) +
      labs(title='Comparación del precio por metro cuadrado y el número de piso', x = x_axis, y = "Precio por metro cuadrado")+
      theme(legend.position = "bottom")
  })
})
  
  
  
  
  
  
  # GRÁFICO DE MUNICIPIOS
  observeEvent(input$single_plot, {
    selected_municipio <- input$single_plot
    zonas_filtradas <- unique(datos$zona[datos$Municipio == selected_municipio])
    
    updateSelectInput(session, "zona_plot",
                      choices = zonas_filtradas,
                      selected = zonas_filtradas[1])
  })
  
  observeEvent(input$update_municipio, {
    output$municipioPlot1 <- renderPlot({
      x_axis <- input$x_axis_municipio
      ggplot(datos, aes_string(x = x_axis, y = "precio_m2", fill = "Municipio")) +
        geom_bar(stat = "identity", position = "dodge", width = 0.7) +
        facet_grid(. ~ Municipio, scales = "free_x") +
        labs(x = x_axis, y = "precio_m2", fill = "Municipio") +
        ggtitle("precio_m2 por Municipio") +
        theme(plot.title = element_text(hjust = 0.5),
              axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
    })
    
    output$singleMunicipioPlot <- renderPlot({
      x_axis <- input$x_axis_municipio
      selected_municipio <- input$single_plot
      datos_filtrados <- datos[datos$Municipio == selected_municipio, ]
      ggplot(datos_filtrados, aes_string(x = x_axis, y = "precio_m2", fill = "Municipio")) +
        geom_bar(stat = "identity", position = "dodge", width = 0.7) +
        labs(x = x_axis, y = "precio_m2", fill = "Municipio") +
        ggtitle(paste("precio_m2 en", selected_municipio)) +
        theme(plot.title = element_text(hjust = 0.5),
              axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
    })

    output$zonaPlot <- renderPlot({
      x_axis <- input$x_axis_municipio
      selected_zona <- input$zona_plot
      datos_filtrados_zona <- datos[datos$zona == selected_zona, ]
      ggplot(datos_filtrados_zona, aes_string(x = x_axis, y = "precio_m2", fill = "zona")) +
        geom_bar(stat = "identity", position = "dodge", width = 0.7) +
        labs(x = x_axis, y = "precio_m2", fill = "zona") +
        ggtitle(paste("precio_m2 en la Zona", selected_zona)) +
        theme(plot.title = element_text(hjust = 0.5),
              axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
    })
  })

  
  
  
    
    
    
    
    
    
    
    
    
    
  # GRÁFICO DE BÁSICOS
  
  
observeEvent(input$update_basicos, {   # Código que se activara cuando toquemos el boton de "update_basicos"
    output$BasicosPlot <- renderPlot({ # Gráfico en base al elemento llamado BasicosPlot
      x_axis <- input$x_axis_basicos   # Los valores de input que recibira el gráfico para ser reactivo son valores del eje X 
      datos_resumidos <- datos %>%                   # Datos
        group_by(across(all_of(x_axis))) %>%         # Agrupación, para cada eje X se hara un grupo
        summarise(Cantidad = n(), .groups = 'drop')  # Resumido por la media del precio_m2, para cada eje X se hara un resumen por precio_m2 

      ggplot(datos_resumidos, aes_string(x = x_axis, y = "Cantidad")) + # Datos y ejes
        geom_bar(stat = "identity") +  # Gráfico de barras
        labs(x_axis, y = "Cantidad") + # Nombres de los ejes
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))  
      # Tamaño y ángulo de los elementos del eje X
    })
  })

}

shinyApp(ui, server)
#





```



```{r}



datos_4 <- datos_2 %>%
  mutate(precio_m2_rec = case_when(
    precio_m2 >= 13 ~ "Precio m2 mayor a 13",
    precio_m2 < 13 ~  "Precio m2 menor a 13"))

datos_4




```



```{r}

ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      conditionalPanel(
        condition = "input.tabselected == 1",
        selectInput("x_axis_datos1", "Seleccione el eje X:",
                    choices = list(
                      "Baños" = "baños",
                      "Habitaciones" = "cant_habitaciones",
                      "Disposición" = "disposicion",
                      "Cuartos" = "cant_cuartos",
                      "Garages" = "cant_de_est")),
        actionButton("update_datos1", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 2",
        selectInput("x_axis_datos2", "Seleccione el eje X:",
                    choices = list(
                      "Metros Cuadrados por Construcción" = "m2_const",
                      "Metros por Terraza" = "m2_terraza",
                      "Metros Cuadrados por Tierra" = "m2_totales")),
        actionButton("update_datos2", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 4",
        selectInput("x_axis_gastos", "Seleccione el eje X para los gráficos de Gastos Comunes:",
                    choices = list(
                      "Tipo de Propiedad" = "tipo_prop",
                      "Disposición" = "disposicion",
                      "Condición" = "Condicion",
                      "Municipio" = "Municipio")),
        actionButton("update_gastos", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 5",
        selectInput("x_axis_bernoulli", "Seleccione el eje X para los gráficos de Bernoulli:",
                    choices = list(
                      "Conexión Gas" = "conexion_gas",
                      "WiFi" = "WiFi",
                      "Duplex" = "Duplex",
                      "Pet" = "Pet",
                      "Pool" = "Pool",
                      "Gym" = "Gym")),
        actionButton("update_bernoulli", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 6",
        selectInput("x_axis_municipio", "Seleccione el eje X:",
                    choices = list(
                      "Zona" = "zona",
                      "Tipo de Propiedad" = "tipo_prop",
                      "Condición" = "Condicion",
                      "Disposicion" = "disposicion")),
        selectInput("single_plot", "Seleccione el Municipio:",
                    choices = unique(datos$Municipio),
                    selected = unique(datos$Municipio)[1]),
        selectInput("zona_plot", "Seleccione la Zona:",
                    choices = NULL),  # Inicialmente vacío
        actionButton("update_municipio", "Actualizar Gráficos")
      ), 
      conditionalPanel(
        condition = "input.tabselected == 7",
        selectInput("x_axis_basicos", "Seleccione el eje X:",
                    choices = list(
                      "Municipio" = "Municipio",
                      "Tipo de Propiedad" = "tipo_prop",
                      "Condición" = "Condicion")),
        actionButton("update_basicos", "Actualizar Gráficos")
      )
    ),
    mainPanel(
      tabsetPanel(id = "tabselected",
                  tabPanel("Datos1",
                           h2("Gráfico de Datos1"),
                           plotOutput("barPlot"),
                           value = 1
                  ),
                  tabPanel("Datos2",
                           h2("Gráfico de Datos2"),
                           plotOutput("scatterPlot"),
                           value = 2
                  ),
                  tabPanel("Mapa",
                           h2("Gráfico de Mapa"),
                           value = 3
                  ),
                  tabPanel("Gastos Comunes",
                           h2("Gráfico de Gastos Comunes"),
                           plotOutput("gastosPlot1"),
                           value = 4
                  ),
                  tabPanel("Bernoulli",
                           h2("Gráfico de Bernoulli"),
                           plotOutput("bernoulliPlot"),
                           value = 5
                  ),
                  tabPanel("Municipio",
                           h2("Gráficos por Municipio"),
                           plotOutput("municipioPlot1"),
                           plotOutput("singleMunicipioPlot"),
                           plotOutput("zonaPlot"),
                           value = 6
                  ),
                  tabPanel("Basicos",
                           h2("Gráficos Básicos"),
                           plotOutput("BasicosPlot"),
                           value = 7
                  )
      )
    )
  )
)



server <- function(input, output, session) {

  # GRÁFICO DE DATOS 1
  observeEvent(input$update_datos1, {
    output$barPlot <- renderPlot({
      x_axis <- input$x_axis_datos1

      datos_resumidos <- datos %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(media_precio_m2 = mean(precio_m2, na.rm = TRUE), .groups = 'drop')

      p1 <- ggplot(datos, aes_string(x = x_axis)) +
        geom_bar() +
        scale_x_discrete(breaks = unique(datos[[x_axis]])) +
        labs(x = x_axis, y = "Cantidad")

      p2 <- ggplot(datos_resumidos, aes_string(x = x_axis, y = "media_precio_m2")) +
        geom_bar(stat = "identity") +
        scale_x_discrete(breaks = unique(datos_resumidos[[x_axis]])) +
        labs(x = x_axis, y = "Media precio_m2 m2")

      gridExtra::grid.arrange(p1, p2, nrow = 2)
    })
  })

  # GRÁFICO DE DATOS 2
  observeEvent(input$update_datos2, {
    output$scatterPlot <- renderPlot({
      x_axis <- input$x_axis_datos2
      datos_2 <- datos %>% select(all_of(c(x_axis, "precio_m2")))
      ggplot(datos_2, aes_string(x = x_axis, y = "precio_m2")) +
        geom_point() +
        labs(x = x_axis, y = "precio_m2") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })

  # GRÁFICO DE GASTOS COMÚNES
  observeEvent(input$update_gastos, {
    output$gastosPlot1 <- renderPlot({
      x_axis <- input$x_axis_gastos
      ggplot(datos, aes_string(x = x_axis, y = "Gastos_Comunes")) +
        geom_bar(stat="identity") +
        theme(axis.text.x = element_text(angle = 90, hjust = 1))
    })
  })

  # GRÁFICO DE BERNOULLIS
  observeEvent(input$update_bernoulli, {
    output$bernoulliPlot <- renderPlot({
      x_axis <- input$x_axis_bernoulli
      ggplot(data = datos_4) +
        geom_mosaic(aes_string(x = paste0("product(precio_m2_rec, ", x_axis, ")"), fill = "precio_m2_rec")) +
        labs(title = 'Comparación del precio por metro cuadrado y el número de piso', x = x_axis, y = "Precio por metro cuadrado") +
        theme(legend.position = "bottom")
    })
  })

  # GRÁFICO DE MUNICIPIOS
  observeEvent(input$single_plot, {
    selected_municipio <- input$single_plot
    zonas_filtradas <- unique(datos$zona[datos$Municipio == selected_municipio])
    
    updateSelectInput(session, "zona_plot",
                      choices = zonas_filtradas,
                      selected = zonas_filtradas[1])
  })
  
  observeEvent(input$update_municipio, {
    output$municipioPlot1 <- renderPlot({
      x_axis <- input$x_axis_municipio
      ggplot(datos, aes_string(x = x_axis, y = "precio_m2", fill = "Municipio")) +
        geom_bar(stat = "identity", position = "dodge", width = 0.7) +
        facet_grid(. ~ Municipio, scales = "free_x") +
        labs(x = x_axis, y = "precio_m2", fill = "Municipio") +
        ggtitle("precio_m2 por Municipio") +
        theme(plot.title = element_text(hjust = 0.5),
              axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
    })
    
    output$singleMunicipioPlot <- renderPlot({
      x_axis <- input$x_axis_municipio
      selected_municipio <- input$single_plot
      datos_filtrados <- datos[datos$Municipio == selected_municipio, ]
      ggplot(datos_filtrados, aes_string(x = x_axis, y = "precio_m2", fill = "Municipio")) +
        geom_bar(stat = "identity", position = "dodge", width = 0.7) +
        labs(x = x_axis, y = "precio_m2", fill = "Municipio") +
        ggtitle(paste0("precio_m2 en ", selected_municipio)) +
        theme(plot.title = element_text(hjust = 0.5),
              axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
    })
    
    output$zonaPlot <- renderPlot({
      selected_municipio <- input$single_plot
      selected_zona <- input$zona_plot
      datos_filtrados <- datos[datos$Municipio == selected_municipio & datos$zona == selected_zona, ]
      ggplot(datos_filtrados, aes_string(x = "precio_m2", fill = "Municipio")) +
        geom_bar(position = "dodge", width = 0.7) +
        labs(x = "precio_m2", y = "Cantidad", fill = "Municipio") +
        ggtitle(paste0("precio_m2 en ", selected_zona, " (", selected_municipio, ")")) +
        theme(plot.title = element_text(hjust = 0.5),
              axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
    })
  })

  # GRÁFICO DE BÁSICOS
  observeEvent(input$update_basicos, {
    output$BasicosPlot <- renderPlot({
      x_axis <- input$x_axis_basicos
      ggplot(datos, aes_string(x = x_axis, fill = "Municipio")) +
        geom_bar(position = "dodge") +
        labs(x = x_axis, y = "Cantidad", fill = "Municipio") +
        theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
    })
  })
}

shinyApp(ui, server)



```

