
# Introducción

```{r}
# INSTALAR LIBRERÍAS
#install.packages("shiny")
#install.packages("DT")
 


```


```{r}
# LIBRERÍAS
library(shiny)
library(DT)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(here)
library(readxl)
#

```


```{r}
# DATOS
#here()
# Datos limpios sobre precio de casas
datos <- read_excel(here("Shiny_Proyecto","app","datos_limpios.xlsx"))
datos



```







```{r}




colores_personalizados <- c(
  "Municipio_A" = "red", "Municipio_B" = "blue", "Municipio_C" = "green",
  "Municipio_CH" = "purple", "Municipio_D" = "orange", "Municipio_E" = "pink",
  "Municipio_F" = "brown", "Municipio_G" = "cyan"
)

# UI
ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      conditionalPanel(
        condition = "input.tabselected == 1",
        selectInput("x_axis_datos1", "Seleccione el eje X:",
                    choices = list(
                      "Baños" = "baños",
                      "Habitaciones" = "cant_habitaciones",
                      "Disposición" = "disposicion",
                      "Cuartos" = "cant_cuartos",
                      "Garages" = "cant_de_est")),
        actionButton("update_datos1", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 2",
        selectInput("x_axis_datos2", "Seleccione el eje X:",
                    choices = list("Metros Cuadrados por Construcción" = "m2_const",
                                   "Metros por Terraza" = "m2_terraza",
                                   "Metros Cuadrados por Tierra" = "m2_totales")),
        actionButton("update_datos2", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 4",
        selectInput("x_axis_gastos", "Seleccione el eje X para los gráficos de Gastos Comunes:",
                    choices = list(
                      "Tipo de Propiedad" = "tipo_prop",
                      "Disposición" = "disposicion",
                      "Condición" = "Condicion")),
        actionButton("update_gastos", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 6",
        selectInput("x_axis_municipio", "Seleccione el eje X:",
                    choices = list("Zona" = "zona",
                                   "Tipo de Propiedad" = "tipo_prop",
                                   "Condición" = "Condicion")),
        actionButton("update_municipio", "Actualizar Gráficos")
      )
    ),
    mainPanel(
      tabsetPanel(id = "tabselected",
                  tabPanel("Datos1",
                           h2("Gráfico de Datos1"),
                           plotOutput("barPlot"),
                           value = 1
                  ),
                  tabPanel("Datos2",
                           h2("Gráfico de Datos2"),
                           plotOutput("scatterPlot"),
                           value = 2
                  ),
                  tabPanel("Mapa",
                           h2("Gráfico de Mapa"),
                           value = 3
                  ),
                  tabPanel("Gastos Comunes",
                           h2("Gráfico de Gastos Comunes"),
                           plotOutput("gastosPlot1"),
                           value = 4
                  ),
                  tabPanel("Bernoulli",
                           h2("Gráfico de Bernoulli"),
                           plotOutput("bernoulliPlot"),
                           value = 5
                  ),
                  tabPanel("Municipio",
                           h2("Gráficos por Municipio"),
                           plotOutput("municipioPlot1"),
                           value = 6
                  )
      )
    )
  )
)

# Server
server <- function(input, output, session) {

  observeEvent(input$update_datos1, {
    output$barPlot <- renderPlot({
      x_axis <- input$x_axis_datos1
      if (x_axis == "disposicion") {
        p1 <- ggplot(datos, aes(x = disposicion)) +
          geom_bar() +
          labs(x = "Disposición", y = "Cantidad")

        
         Prueba20 <- datos %>%     
         group_by(disposicion) %>% 
         summarise(media_precio = mean(precio)) 
         Prueba20
        
        p2 <- ggplot(Prueba20, aes(x = disposicion, y = media_precio)) +
          geom_bar(stat = "identity") +
          labs(x = "Disposición", y = "Media Precio")

        gridExtra::grid.arrange(p1, p2, nrow = 2)
      } else {
        datos_resumidos <- datos %>%
          group_by(across(all_of(x_axis))) %>%
          summarise(media_precio = mean(precio, na.rm = TRUE), .groups = 'drop')

        p1 <- ggplot(datos, aes_string(x = x_axis)) +
          geom_bar() +
          scale_x_continuous(breaks = unique(datos[[x_axis]])) +
          labs(x = x_axis, y = "Cantidad")

        p2 <- ggplot(datos_resumidos, aes_string(x = x_axis, y = "media_precio")) +
          geom_bar(stat = "identity") +
          scale_x_discrete(breaks = unique(datos_resumidos[[x_axis]])) +
          labs(x = x_axis, y = "Media Precio")

        gridExtra::grid.arrange(p1, p2, nrow = 2)
      }
    })
  })

  observeEvent(input$update_datos2, {
    output$scatterPlot <- renderPlot({
      x_axis <- input$x_axis_datos2
      datos_2 <- datos %>% select(all_of(c(x_axis, "precio")))
      ggplot(datos_2, aes_string(x = x_axis, y = "precio")) +
        geom_point() +
        labs(x = x_axis, y = "Precio") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })

  observeEvent(input$update_gastos, {
    output$gastosPlot1 <- renderPlot({
      x_axis <- input$x_axis_gastos
      ggplot(datos, aes_string(x = x_axis, y = "Gastos_Comunes")) +
        geom_bar(stat="identity") +
        theme(axis.text.x = element_text(angle = 90, hjust = 1))
    })
  })
  
  
  observe({
    output$bernoulliPlot <- renderPlot({
      dum <- datos %>%
        select("vista_al_mar", "vivienda_social", "Barbecue",                           "Living_Room", "Closet", "Patio", "Pool", "Garage",                     "Pet", "coneccion_cas", "Playroom", "Duplex",                           "calefaccion", "WiFi", "zona_barbacoa", "Gym", "balcon",                  "deposito", "Air_Conditioning", "jardin",                                "losa_radiante", "Solarium", "amueblado")
      
      calcular_y_unir <- function(df, col, resultado_final) { # Función
       temp <- df %>%       # Datos
        group_by(valor = .data[[col]]) %>% #
       summarise(Mean = mean(precio, na.rm = TRUE), .groups = "drop")
       colnames(temp)[2] <- paste0(col, "_Media") 
       resultado_final <- left_join(resultado_final, temp, by = "valor",        relationship = "many-to-one") 
       return(resultado_final) # Resultado
        }

      resultado_final <- data.frame(valor = c(0, 1))
      columnas <- colnames(dum)
      for (col in columnas) {
        resultado_final <- calcular_y_unir(datos, col, resultado_final)
      }
      data_long <- resultado_final %>%
        pivot_longer(-valor, names_to = "variable", values_to = "value")
      ggplot(data_long, aes(x = variable, y = value, fill = as.factor(valor))) + 
        geom_bar(stat = "identity", position = position_dodge(width = 0.5)) +  
        labs(x = "Variable", y = "Value", fill = "Value") + 
        theme(axis.text.x = element_text(angle = 90, hjust = 1))
    })
  })
  
  
  

  observeEvent(input$update_municipio, {
    output$municipioPlot1 <- renderPlot({
      x_axis <- input$x_axis_municipio
      ggplot(datos, aes_string(x = x_axis, y = "precio", fill = "Municipio")) +
        geom_bar(stat = "identity", position = "dodge", width = 0.7) +
        facet_grid(. ~ Municipio, scales = "free_x") +
        labs(x = x_axis, y = "Precio", fill = "Municipio") +
        ggtitle("Precio por Municipio") +
        scale_fill_manual(values = colores_personalizados) +
        theme(plot.title = element_text(hjust = 0.5),
              axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
    })
  })
}

shinyApp(ui = ui, server = server)



``` 