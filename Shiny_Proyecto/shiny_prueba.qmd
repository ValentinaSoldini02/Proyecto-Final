
# Introducción

```{r}
# INSTALAR LIBRERÍAS
install.packages("shiny")
install.packages("DT")
 


```


```{r}
# LIBRERÍAS
library(shiny)
library(DT)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(here)


```


```{r}
# DATOS
#here()
# Datos limpios sobre precio de casas
datos <- read_excel(here("Shiny_Proyecto","app","datos_limpios.xlsx"))
datos



```











Posiblmente correcto
```{r}

ui <- fluidPage(
  titlePanel("Análisis de Alquileres"),
  sidebarLayout(
    sidebarPanel(
      conditionalPanel(
        condition = "input.tabselected == 1",
        selectInput("x_axis_datos1", "Seleccione el eje X:", 
                    choices = list("Baños" = "baños", 
                                   "Habitaciones" = "cant_habitaciones", 
                                   "Cuartos" = "cant_cuartos",
                                   "Garages" = "cant_de_est")),
        actionButton("update_datos1", "Actualizar Gráficos")
      ),
      conditionalPanel(
        condition = "input.tabselected == 2",
        selectInput("x_axis_datos2", "Seleccione el eje X:", 
                    choices = list("Metros Cuadrados por Construcción" = "m2_const", 
                                   "Metros por Terraza" = "m2_terraza", 
                                   "Metros Cuadrados por Tierra" = "m2_totales")),
        actionButton("update_datos2", "Actualizar Gráficos")
      )
    ),
    mainPanel(
      tabsetPanel(id = "tabselected",
        tabPanel("Datos1",
                 h2("Gráfico de Datos1"),
                 plotOutput("barPlot"),
                 value = 1
        ),
        tabPanel("Datos2",
                 h2("Gráfico de Datos2"),
                 plotOutput("scatterPlot"),
                 value = 2
        ),
        tabPanel("Mapa",
                 h2("Gráfico de Mapa"),
                 value = 3
        )
      )
    )
  )
)

# Define el servidor (server)
server <- function(input, output, session) {
  
  observeEvent(input$update_datos1, {
    # Actualizar gráfico en la pestaña Datos1
    output$barPlot <- renderPlot({
      # Datos simulados (reemplazar con tu dataframe original)
      # datos <- data.frame(
      #   baños = sample(1:4, 100, replace = TRUE),
      #   cant_habitaciones = sample(1:5, 100, replace = TRUE),
      #   cant_cuartos = sample(1:7, 100, replace = TRUE),
      #   cant_de_est = sample(0:3, 100, replace = TRUE),
      #   precio = runif(100, 100000, 500000)
      # )
      
      x_axis <- input$x_axis_datos1
      
      # Seleccionar las columnas relevantes
      datos <- datos %>% select(all_of(c(x_axis, "precio")))
      
      # Calcular la media de precios
      datos_resumidos <- datos %>%
        group_by(across(all_of(x_axis))) %>%
        summarise(media_precio = mean(precio), .groups = 'drop')
      
      # Gráfico de barras para cantidad de elementos
      p1 <- ggplot(datos, aes_string(x = x_axis)) + 
        geom_bar() +
        scale_x_continuous(breaks = datos_resumidos[[x_axis]]) +
        labs(x = x_axis, y = "Cantidad")
      
      # Gráfico de barras para media de precios
      p2 <- ggplot(datos_resumidos, aes_string(x = x_axis, y = "media_precio")) + 
        geom_bar(stat = "identity") +
        scale_x_continuous(breaks = datos_resumidos[[x_axis]]) +
        labs(x = x_axis, y = "Media Precio")
      
      # Mostrar ambos gráficos juntos
      gridExtra::grid.arrange(p1, p2, nrow = 2)
    })
  })
  
  observeEvent(input$update_datos2, {
    # Actualizar gráfico en la pestaña Datos2
    output$scatterPlot <- renderPlot({
      # Datos simulados (reemplazar con tu dataframe original)
      datos_2 <- datos
      # datos_2 <- data.frame(
      #   m2_const = runif(100, 50, 200),
      #   m2_terraza = runif(100, 10, 50),
      #   m2_totales = runif(100, 100, 500),
      #   precio = runif(100, 100000, 500000)
      # )
      
      x_axis <- input$x_axis_datos2
      
      # Seleccionar las columnas relevantes
      datos_2 <- datos_2 %>% select(all_of(c(x_axis, "precio")))
      
      ggplot(datos_2, aes_string(x = x_axis, y = "precio")) + 
        geom_point() +
        labs(x = x_axis, y = "Precio") +
        theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size = 8))
    })
  })
}

# Ejecuta la aplicación Shiny
shinyApp(ui = ui, server = server)


```