---
title: "Informe"
format: pdf
author: "Diego Da Rosa, Valentina Soldini, Nahuel Bizoso"
editor: visual
---

## Introducción:

El mercado inmobiliario ha sido ha sido de gran importancia durante muchos años, tanto para inversores como para personas que buscan un alquiler una propiedad. La variabilidad de los precios puede depender de diferentes factores, como es la ubicación, caracteristicas de la propiedad, también la seguridad de la zona y algunos otros aspectos. Este estudio tiene como objetivo analizar como varían los precios de las propiedades teniendo en cuenta diferentes aspectos. Para realizar este análisis, plenteamos las diferentes preguntas de investigación:

-   ¿Cambia el precio con respecto al barrio en que se ecuestre la propiedad?
-   ¿En que municipio hay más alquileres?
-   ¿Cuál es la variable que más influye en el precio?
-   ¿Influye cuán peligroso es la zona para alquilar la propiedad y disminuye el precio? Mejorará el modelo?
-   ¿Hay alguna variable que debería de eliminarse al modelo?

Estas preguntas guiarán nuestro analisis para comprender mejor los factores que afectan los precios en el mercado inmobiliario y proporcionar una herramienta útil para los distintos agentes, ya sean compradores, vendedores, inversores y agentes inmobiliarios.

## Datos :

Los datos utilizados en este análisis se han extraidos de una pagina web llamada **kaggle**, consiste en una plataforma web que reúne la comunidad Data Science, con más de 536 mil miembros activos en 194 países. Estos datos contienen variables que describen diversos aspectos de una propiedad disponibles para alquilar en el año 2023. La base de datos abarcan un total de 2361 registros de diferentes propiedades y 45 variables que incluyen desde el precio hasta diferentes caracteristicas internas y externas de la propiedad.

Puedes encontrar el dataset en el siguiente enlace: [Precio de alquiler de casas en Montevideo Dataset](https://www.kaggle.com/datasets/lasm1984/house-rental-price-in-montevideo?select=houses.csv)

## Análisis exploratorio de los datos

Con el objetivo de responder las preguntas planteadas, en primer lugar, se realizó una limpieza de los datos. Esta limpieza incluyó la eliminación de datos duplicados,valores atípocos y valores nulos. Además, se decició eliminar las columnas "Furnished...32", "Furnished...42", y "Floors". Las dos primeras columnas fueron eliminadas porque exixtía una tercera columna que contenía la misma información. La columna "Floors" fue eliminada debido a que no contenía información relevante, tenía muchos datos faltantes y los datos presentes eran inconsistentes y poco fiables.A lo largo del análisis se fueron quitando y modificando otras variables a medida que lo veíamos necesario.

Otra modificación que se realizó fue la agrupación de las zonas de Montevideo en municipios. Cada municipio, con sus respectivas zonas se puede observar en la "Tabla 1". También se convirtió la columna precio por precio por metros cuadrados, para tener un mejor análisis de los datos.

En ciertas columnas habían valores nulos, para evitar esto se realizo lo siguiente:

-   A la columna "direccion" se le asignó el nombre de la zona a la que correspondía la propiedad.
-   A la columna "precio_m2" se calculó la media de toda la columna y se le asignó este valor a cada fila que no tenía dato.
-   A la columna "condición " se le asigno la categoria mas frcuenta y lo mismo sucedio con la columna "disposición"

```{r}
#| echo: false
library(tidyverse)
library(GGally)
library(car)
library(skedastic)
library(robustbase)
library(tseries)
library(here)
library(readxl)
library(ggplot2)
library(forcats)
library(gt)
library(dplyr)
library(randomForest)
library(modelr)
library(knitr)
```

```{r}
#| echo: false
tabla_municipio <- data.frame(
  Municipio = c("Municipio A","Municipio B", "Municipio C", "Municipio CH", "Municipio D", "Municipio E", "Municipio F", "Municipio G"),
  Columna2 = c("Cerro, La Teja, Paso de la Arena, Belvedere, Nuevo París, Prado",
  "Cordón, Parque Rodó, Palermo, Barrio Sur, Ciudad Vieja, Centro, Aguada, La Comercial", 
  "Aguada, Arroyo Seco, Atahualpa, Bella Vista, Brazo Oriental, Capurro, Goes, Jacinto Vera, La Comercial, Mercado Modelo, Reducto, Villa Muñoz", 
  "Tres Cruces, La Blanqueada, Parque Batlle, Villa Dolores, Buceo, Pocitos, Punta Carretas",
  "Piedras Blancas, Villa Española, Unión, Bolivar, Cerrito",
  "Malvín Norte, Malvín, Carrasco Norte, Carrasco, Punta Gorda, Buceo, La Blanqueada",
  "Maroñas, Flor de Maroñas, Villa Española, Ituzaingó, Jardines del Hipódromo, Piedras Blancas",
  "Lezica, Peñarol, Nuevo París, Sayago, Conciliación, Colón"))

tabla_municipio 

gt(tabla_municipio)

gt(tabla_municipio)
```

```{r}
#| echo: false
# Lectura de los datos:
# Datos sobre precio de casas
datos <- read_csv(here("houses.csv"))
datos

# Datos sobre homicidios por barrio que vamos a usar para hacer un join
datos_delitos <- read_excel(here("homicidios_dolosos_consumados.xlsx"))
datos_delitos
```

```{r}
#| echo: false

# ORDENANDO LOS DATOS:

#Eliminando los datos atipicos

datos_2 <- datos %>% filter(Price <= 150000 & Common_Expenses <= 10000)

#Reenombramos las variables:
datos_2 <- datos_2|>
  rename(precio = Price,
         nro_de_piso = Floor,
         cant_de_piso = Number_of_Floors,
         zona = Zone,
         disposicion = Disposition,
         cant_cuartos = Bedrooms...18,
         cant_habitaciones = Bedrooms...13,
         m2_terraza = Terrace_Square_Meters,
         año_de_const = Year_of_Construction,
         vista_al_mar = Sea_View,
         deposito = Storage,
         jardin = Garden,
         losa_radiante = Radiant_Floor_Heating,
         amueblado = Furnished...45,
         direccion = Address,
         tipo_prop = Property_Type,
         baños = Bathrooms,
         m2_const = Built_Square_Meters,
         m2_totales = Land_Square_Meters,
         vivienda_social = Social_Housing,
         cant_de_est = Garages,
         coneccion_gas = Gas_Pipeline,
         calefaccion = Heating,
         zona_barbacoa = Grill,
         balcon = Balcony
         )




# Precio por metro cuadrado

datos_2 <- datos_2 |>
  mutate(precio_m2 = ifelse(m2_const == 0, 0, precio / m2_const))

# Quitando las columnas Furnished...32, Furnished...42, y Floors

datos_2 <- 
  datos_2|>
  select(-Furnished...32, -Furnished...42, -Floors, -precio, -m2_const)

# Datos sin duplicados
datos_2 <- datos_2[!duplicated(datos_2), ]

# Cambiando la zona por municipios

datos_2 <- datos_2 %>% # Datos
  mutate(Municipio = case_when( # Casos donde a cada barrio le vamos a asociar un municipio
    
    zona %in% c("Cerro","La Teja","Paso de la Arena","Belvedere","Nuevo París","Prado")  ~ "Municipio_A",

    zona %in% c("Cordón","Parque Rodó","Palermo","Barrio Sur","Ciudad Vieja","Centro","Aguada","La Comercial") ~ "Municipio_B",

    zona %in% c("Aguada", "Arroyo Seco", "Atahualpa", "Bella Vista", "Brazo Oriental", "Capurro", "Goes", "Jacinto Vera", "La Comercial", "Mercado Modelo", "Reducto", "Villa Muñoz") ~ "Municipio_C",

    zona %in% c("Tres Cruces", "La Blanqueada", "Parque Batlle", "Villa Dolores", "Buceo", "Pocitos", "Punta Carretas") ~ "Municipio_CH",

    zona %in% c("Piedras Blancas", "Villa Española", "Unión","Bolivar","Cerrito") ~ "Municipio_D",

    zona %in% c("Malvín Norte","Malvín", "Carrasco Norte", "Carrasco", "Punta Gorda", "Buceo", "La Blanqueada") ~ "Municipio_E",

    zona %in% c("Maroñas", "Flor de Maroñas", "Villa Española", "Ituzaingó", "Jardines del Hipódromo", "Piedras Blancas") ~ "Municipio_F",

    zona %in% c("Lezica", "Peñarol", "Nuevo París", "Sayago", "Conciliación", "Colón") ~ "Municipio_G",

    TRUE ~ "Otro" # Por si hay barrios que no estén en la lista
  ))



```

Comendando la limpieza para la regrecion lineal multiple:

Dado que la presencia de los valores nulos en los datos pueden afectar negativamente el ajuste y la precisión lineal múltiple, se realizaron varios pasos de limpieza de datos para manejar estos valores faltantes de manera mas adecuada. A continuación, se decriben los métodos utilizados para las diferentes columnas que contiene valores nulos en nuestro conjunto de datos,como se menciono anteriormente, en la columna de "precio_m2" se calculó la media de toda la columna y se le asignó este valor a cada fila que no tenía dato, en la columna "direccion" se le asignó el nombre de la zona a la que correspondía la propiedad y por último la columna "condición " se le asigno la categoria mas frcuenta y lo mismo sucedio con la columna "disposición"

```{r}
#| echo: false
# Convertir columnas categóricas a factores si es necesario
datos_2$tipo_prop <- as.factor(datos_2$tipo_prop)
datos_2$zona <- as.factor(datos_2$zona)
datos_2$Condition <- as.factor(datos_2$Condition)
datos_2$disposicion <- as.factor(datos_2$disposicion)
datos_2$vista_al_mar <- as.factor(datos_2$vista_al_mar)
datos_2$vivienda_social <- as.factor(datos_2$vivienda_social)
datos_2$Barbecue <- as.factor(datos_2$Barbecue)
datos_2$Living_Room <- as.factor(datos_2$Living_Room)
datos_2$Closet <- as.factor(datos_2$Closet)
datos_2$Patio <- as.factor(datos_2$Patio)
datos_2$Pool <- as.factor(datos_2$Pool)
datos_2$Garage <- as.factor(datos_2$Garage)
datos_2$Pet <- as.factor(datos_2$Pet)
datos_2$coneccion_gas <- as.factor(datos_2$coneccion_gas)
datos_2$Playroom <- as.factor(datos_2$Playroom)
datos_2$Duplex <- as.factor(datos_2$Duplex)
datos_2$calefaccion <- as.factor(datos_2$calefaccion)
datos_2$WiFi <- as.factor(datos_2$WiFi)
datos_2$Gym <- as.factor(datos_2$Gym)
datos_2$balcon <- as.factor(datos_2$balcon)
datos_2$Air_Conditioning <- as.factor(datos_2$Air_Conditioning)
datos_2$jardin <- as.factor(datos_2$jardin)
datos_2$losa_radiante <- as.factor(datos_2$losa_radiante)
datos_2$Solarium <- as.factor(datos_2$Solarium)
datos_2$amueblado <- as.factor(datos_2$amueblado)
datos_2$zona_barbacoa <- as.factor(datos_2$zona_barbacoa)
datos_2$deposito <- as.factor(datos_2$deposito)
datos_2
```

```{r}
#| echo: false
# Función para reemplazar valores NA en 'direccion' con los valores de 'zona'
reemplazar_direccion <- function(datos_2) {
  if (!"direccion" %in% colnames(datos_2) || !"zona" %in% colnames(datos_2)) {
    stop("Las columnas 'direccion' y 'zona' deben estar presentes en los datos.")
  }
  datos_2$direccion <- ifelse(is.na(datos_2$direccion), datos_2$zona, datos_2$direccion)
  return(datos_2)
}
datos_2 <- reemplazar_direccion(datos_2)


# Función para rellenar valores NA en 'precio_m2' con la media de los valores existentes
rellenar_na_precio_m2 <- function(datos_2) {
  # Verificar si la columna 'precio_m2' existe
  if (!"precio_m2" %in% colnames(datos_2)) {
    stop("La columna 'precio_m2' no está presente en los datos.")
  }
media_precio_m2 <- mean(datos_2$precio_m2, na.rm = TRUE)
  datos_2$precio_m2[is.na(datos_2$precio_m2)] <- media_precio_m2
  return(datos_2)
}

datos_2 <- rellenar_na_precio_m2(datos_2)

# Función para reemplazar valores NA en 'Condicion' con 'Good condition'
reemplazar_na_condicion <- function(datos_2) {
  if (!"Condition" %in% colnames(datos_2)) {
    stop("La columna 'Condicion' no está presente en los datos.")
  }
  datos_2$Condition[is.na(datos_2$Condition)] <- "Good condition"
  return(datos_2)
}

datos_2 <- reemplazar_na_condicion(datos_2)

# Función para reemplazar valores NA en 'disposicion' con 'Front'
reemplazar_na_disposicion <- function(datos_2) {
  if (!"disposicion" %in% colnames(datos_2)) {
    stop("La columna 'disposicion' no está presente en los datos.")
  }
  datos_2$disposicion[is.na(datos_2$disposicion)] <- "Front"
  return(datos_2)
}

datos_2 <- reemplazar_na_disposicion(datos_2)


```

```{r}
#| echo: false
# Pregunta 1) ¿Cambia el precio con respecto al barrio en que se ecuestre la propiedad?


# Elegimos los colores manualmente
colores_personalizados <- c(
  "Municipio_A" = "red",  "Municipio_B" = "blue",  "Municipio_C" = "green",                   "Municipio_CH" = "purple",  "Municipio_D" = "orange",   "Municipio_E" = "pink",
  "Municipio_F" = "brown",  "Municipio_G" = "cyan")


# Gráfico
ggplot(datos_2, aes(x = zona, y = precio_m2, fill = Municipio)) +  # Datos, ejes y color
  geom_bar(stat = "identity", position = "dodge", width = 0.7) +
  # Ancho y posición de las barras

  facet_grid(. ~ Municipio, scales = "free_x") +
  # Usar facet_grid para crear una grilla por Municipio

  labs(x = "Zona", y = "Precio por m^2", fill = "Municipio") + # Etiquetas de los ejes y la leyenda
  ggtitle("Precio por Zona y Municipio") + # Título
  scale_fill_manual(values = colores_personalizados) + # Cambiar la paleta de colores

  theme(plot.title = element_text(hjust = 0.5), # Centrar el título
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Centrar el título y modificar el texto de los elementos del eje X
```

En este gráfico se puede observar que los municipios B, CH y E tienen los precios por metro cuadrado más altos. Dentro del municipio B, la zona con el precio por metro cuadrado más elevado es Centro. En el municipio CH, la zona más costosa es Pocitos, mientras que en el municipio E, la zona con el mayor precio por metro cuadrado es Carrasco.

```{r}
#| echo: false
# Pregunta 3) Qué tipo de inmuebles para alquilar hay?


grupo_tipo <- datos_2 %>% # Datos
  group_by(tipo_prop) %>% # Agrupar por tipo de propiedad
  summarise(Cantidad = n()) # Resumir por cantidad 
grupo_tipo


# Gráfico
ggplot(grupo_tipo, aes(x=fct_reorder(tipo_prop, Cantidad), y=Cantidad)) + # Datos y ejes
  geom_bar(stat="identity") + # Gráfico de barras
  labs(x="Municipio") + # Nombres de los ejes
  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size=8))
# Cambiar el ángulo y el tamaño del texto de los elementos del eje X
```

```{r}
#| echo: false
grupo_estado <- datos_2 %>% # Datos
  group_by(Condition) %>%   # Agrupar por condición de la vivienda
  summarise(Cantidad = n()) # Resumir por la cantidad
grupo_estado


# Gráfico
ggplot(grupo_estado, aes(x=fct_reorder(Condition, Cantidad), y=Cantidad)) + # Datos y ejes
  geom_bar(stat="identity") + # Gráfico de barras
  labs(x="Municipio", y="Precio") + # Nombre de los ejes
  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1, size=8))
# Cambiar el ángulo y el tamaño del texto de los elementos del eje X
```
Al analizar los dos gráficos anteriores, se destaca que la mayoría de los alquileres corresponden a apartamentos, mientras que las propiedades de tierra, negocios especiales, edificios o garajes son menos comunes. Esta tendencia sugiere una alta disponibilidad de apartamentos en Montevideo, lo cual representa una oportunidad licrativa para los inversionistas.

Al considerar el primer gráfico, que muestra que la mayoría de las propiedades están en buenas o excelentes condiciones, los potenciales inquilinos se beneficiarían al evitar la necesidad de realizar modificaciones significativas en las propiedades disponibles para alquilar.


```{r}
# Gráfico
ggplot(datos_2, aes(x = fct_infreq(tipo_prop), y = precio_m2, fill = Municipio)) + # Datos, ejes y color
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + # Ajustar el ancho de las barras
  facet_grid(. ~ Municipio, scales = "free_x") + # Usar facet_grid para crear una grilla por Municipio
  labs(x = "Zona", y = "Precio", fill = "Municipio") + # Etiquetas de los ejes y la leyenda
  ggtitle("Tipo de alquiler por municipio") + # Título del gráfico
  scale_fill_manual(values = colores_personalizados) + # Cambiar la paleta de colores
  theme(plot.title = element_text(hjust = 0.5), # Centrar el título
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Cambiar el ángulo y el tamaño del texto de los elementos del eje X
```

En este gráfico trata de explicar que tipo de propiedad se alquila en cada municipio. En los municipios A, 



En general el tipo de alquiler más común varia según municipio, en los municipios A, C, D y G son más comunes los alquileres de Alquileres. En cambio en los municipios CH y E son más comunes los alquileres de casas, finalmente en el municipio B es más común el alquiler de Oficinas.


```{r}
#| echo: false

#Sub datos:

# A la columna direccion la quitamos porque estaba la columna municipio y es a lo que nosotros nos queremos enfocar. Por ptro lado, tambien sacamos la columna losa_radiante porque habia otra columna que es calefaccion y nos parecio repetitiva.
# Tenemos un problema y es que hay algunas variables que estan correlacionadas entre si, y a alguna de ellas, en nuestra opinion son importantes para predecir el precio de las propiedades. En este casa voamos a sacar la variable Apartments_per_Floor. La variable baños y cant_de_est tambien se saco.
#Tambien le voy a quitar la zona porque vamos a trabajar por municipios


datos_sub <- datos_2  |> 
  select(-direccion, -baños, -cant_de_est, -zona, -cant_cuartos, -cant_de_piso, Air_Conditioning, -losa_radiante )
names(datos_sub)
```

```{r}
#| echo: false
#correlacion:
  
numerical_vars <- datos_sub %>%
  select_if(is.numeric)
  

# Calcular la matriz de correlación
cor_matrix <- cor(numerical_vars, use = "complete.obs")


library(corrplot)
# Visualizar la matriz de correlación
corrplot(cor_matrix, method = "circle", type = "upper", tl.cex = 0.6, tl.col = "black")

#columnas que me gustaria sacar
#año_de_cont, cantidad de habitaciones y cantidad de estacionamientos estan muy correlacionadas. Cantidad de estacionamientos a lo mejor la puedo sacar y que me deje de complicar la vida. Lacolumna banios tambien me esta complicando aunque entiendo que es importane para la prediccion del precio.
#Otra columna que me gustraia sacar es la de loza radiante porque hay otra columna que es calefaccion y asumo que la loza radiante es un tipo de calefaccion.


modelo <- lm(precio_m2 ~. , data = datos_sub)
summary(modelo)
```

```{r}
#| echo: false
vif(modelo)
```

La mayoria de las variables tienen valores de GVIF ajustados menores a 2, lo que generalmente se consudera aceptable por lo que no hay problemas graves de multicolinealidad en el modelo. Las unicas variables que tienen un GVIF ajustados mayor son "m2_totales" y "Municipio", pero sus valores ajustados estan por denajo de 2. Por lo que indica que no hay multicolinealidad severa.

```{r}
#| echo: false
crPlots(modelo)
```

Atípicos:

```{r}
#| echo: false
res <- rstudent(modelo)
yhat <- fitted(modelo)

which(abs(res)>3)

library(ggplot2)
ggplot(modelo, aes(x=yhat, y= res))+
  geom_point()+
  geom_hline(yintercept = -3,color="darkblue")+
  geom_hline(yintercept = 3,color="darkblue")
```

En este caso hay una presencia de 4 datos atipocos. Hay uno que es super notorio y la idea es eliminarlo, con los otros tres hay que ver que se va hacer.

```{r}
#| echo: false
ncvTest(modelo)
```

Datos influyentes:

```{r}
#| echo: false
h_i <- influence(modelo)$hat
D_i <- cooks.distance(modelo)
df_influencia <- data.frame(i = 1:nrow(datos_sub),
                            h_i = h_i,
                            D_i = D_i)
```

```{r}
#| echo: false
ggplot(df_influencia, aes(x = i, y = h_i)) +
  geom_point() +
  geom_segment(aes(x = i, xend = i, y = 0, yend = h_i)) +
  xlab('') +
  ylab(expression(h[i])) +
  geom_abline(slope = 0, intercept = 2*length(coefficients(mod))/nrow(df), col = 2, linetype = 'dashed') +
  ggtitle('Leverage')
```

```{r}
#| echo: false
ggplot(df_influencia, aes(x = i, y = D_i)) +
  geom_point() +
  geom_segment(aes(x = i, xend = i, y = 0, yend = D_i)) +
  xlab('') +
  ylab(expression(D[i])) +
  geom_abline(slope = 0, intercept = 4/nrow(df), col = 2, linetype = 'dashed') +
  ggtitle('Distancia de Cook')
```

En este paso estamos tratando de encontrar que datos son influyentes para lograr poder intervenirlos y que el modelo nos quede mejor. Igualmente voy a necesitar ayuda para poder continuar.

Bosques:

```{r}
#| echo: false
names(datos_sub)
intrain <- sample(x = 1:nrow(datos_sub), size =
nrow(datos_sub)*.7)
training <- datos_sub[intrain,]
testing <- datos_sub[-intrain,]
# ajustamos modelo lineal simple
rf <- randomForest(precio_m2 ~ .,data= training)

```

```{r}
#| echo: false
pred <- predict(rf, newdata = testing)
results <- data.frame(
  Actual = testing$precio_m2,
  Predicciones = pred
)

ggplot(results, aes(x = Actual, y = Predicciones)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, color = "red") +
  labs( x = "Variables originales", y = "Variables predichas") +
  theme_minimal()
```

```{r}
#| echo: false
library(rpart)
library(rattle)
# Separo la muestra en entrenamiento y testeo
inTrain <- sample(1:nrow(datos_2), nrow(datos_2)*.7)
train.set <- datos_2[inTrain,]
test.set <- datos_2[-inTrain,]

library(rpart.plot)
tree_ab <- rpart(precio_m2 ~ Municipio + Condition,
                 data = train.set,
                 control = rpart.control(minsplit = 5, # número mínimo de observaciones que deben existir en un nodo para ser dividido
                                         cp = 0.001, # parámetro de complejidad
                                         maxdepth = 30)) 
prp(tree_ab, 
    faclen = 0,           # No abreviar los nombres de las variables
    cex = 0.8,            # Tamaño del texto
    extra = 101,          # Mostrar tanto el número de observaciones como la proporción de la clase
    box.palette = "RdBu", # Colores de los nodos
    nn = TRUE) 


fancyRpartPlot(tree_ab)

names(datos_2)
```

En este paso se trato de ver en que condiciones estaba cada municipio. Creo que noquedo muy bien, pero es un intento de arbol

Metadatos :

```{r}
#| echo: false
# Creamos variables del tipo character
nombre_variable <- character()
tipo_variable <- character()
descripcion <- character()


# Creamos un dataframe donde vamos a almacenar la información de cada columna basandonos es: Nombre, Tipo de Dato, Descripción
tabla_variables <- data.frame(
  "Nombre de la variable" = nombre_variable,
  "Tipo de variable" = tipo_variable,
  "Descripción" = descripcion,
  stringsAsFactors = FALSE
)



# Creamos la tabla
tabla_variables[1,] <- c("direccion", "Character", "Ubicación donde se encuentra la propiedad")
tabla_variables[2,] <- c("nro_de_piso", "Character", "Número de piso de la propiedad")
tabla_variables[3,] <- c("tipo_prop", "Character", "Tipo de poropiedad, como apartamento, oficina, casa")
tabla_variables[4,] <- c("Condicion", "Character", "Condición en la que esta la vivienda, es una variable que se separa en categorias (Excelente, Buena, Renovada)")
tabla_variables[5,] <- c("disposicion", "Character", "En que posición se encuentra la propiedad separada en categorías (interior, frente, fondo)")
tabla_variables[6,] <- c("m2_terraza", "Numérica", "Metros cuadrado de la terraza")
tabla_variables[7,] <- c("cant_cuartos", "Numérica", "Cantidad de dormitoros de la propiedad")
tabla_variables[8,] <- c("vivienda_social", "Dummy", "Si la propiedad esta destinada para vivienda social, variable de si y no")
tabla_variables[9,] <- c("Closet", "Dummy", "Espacio de guardaropas en la propiedad, variable de si y no")
tabla_variables[10,] <- c("Garage", "Dummy", "Garage en la propiedad, variable de si y no")
tabla_variables[11,] <- c("Playroom", "Dummy", "Sala de juegos en la propiedad, variable de si y no")
tabla_variables[12,] <- c("WiFi", "Dummy", "Conección a wifi en la propiedad, variable de si y no")
tabla_variables[13,] <- c("balcon", "Dummy", "Balcon en la propiedad, variable de si y no")
tabla_variables[14,] <- c("jardin", "Dummy", "Jardin en la propiedad, variable de si y no ")
tabla_variables[15,] <- c("amueblado", "Dummy", "La propiedad viene con los muebles incluidos a la hora de ser alquilado, variable de si y no ")
tabla_variables[16,] <- c("Updated", "Fecha", "Última fecha que fue actualizado el listado")
tabla_variables[17,] <- c("Apartments_per_Floor", "Numérica", "Número de apartamentos por piso en el edificio")
tabla_variables[18,] <- c("zona", "Character", "En que zona de Montevideo se encuentra la propiedad")
tabla_variables[19,] <- c("baños", "Numérica", "Cuántos cuartos hay en la propiedad")
tabla_variables[20,] <- c("m2_totales", "Numérica", "Metros cuadrados de la propiedad, en dolares")
tabla_variables[21,] <- c("cant_de_est", "Numérica", "Cantidad de estacionamientos que tiene disponible la propiedad")
tabla_variables[22,] <- c("Barbecue", "Dummy", "Barbacoa en la propiedad, variable de si y no ")
tabla_variables[23,] <- c("Patio", "Dummy", "Patio en la propiedad, variable de si y no ")
tabla_variables[24,] <- c("Pet", "Dummy", "Si se aceptan perros o no")
tabla_variables[25,] <- c("Duplex", "Numérica", "Si es un duplex o no, duplex es una propiedad que esta encima de otra y generalmente son dos")
tabla_variables[26,] <- c("zona_barbacoa", "Dummy", "Si hay una zona de barbacoa en el edificio de la propiedad, variable de si y no ")
tabla_variables[27,] <- c("deposito", "Dummy", "Área de almacenaiento o depósito en la propiedad, variable de si y no ")
tabla_variables[28,] <- c("losa_radiante", "Dummy", "Losa radiante en la propiedad, variable de si y no ")
tabla_variables[29,] <- c("precio_m2", "Numérica", "El precio de la propiedad por metros cuadrados")
tabla_variables[30,] <- c("Common_Expenses", "Numérica", "Gastos comunes asociados a la propiedad, en dolares")
tabla_variables[31,] <- c("cant_de_piso", "Numérica", "Núemero total de piso en el edificio")
tabla_variables[32,] <- c("Condition", "Character", "En que condición se encuentra el apartamento searado en caregorías(Good condition, 	Excellent condition, 	Brand new)")
tabla_variables[33,] <- c("cant_habitaciones", "Numérica", "Cantidad de habitaciones en la propiedad")
tabla_variables[34,] <- c("año_de_const", "Numérica", "En que año fue construida la propiedad")
tabla_variables[35,] <- c("vista_al_mar", "Dummy", "Propiedad con vista al mar o no, variable de si y no")
tabla_variables[36,] <- c("Living_Room", "Dummy", "Propiedad con living o no")
tabla_variables[37,] <- c("Pool", "Numérica", "Pool en la propiedad")
tabla_variables[38,] <- c("coneccion_cas", "Dummy", "Propiedad cuenta con conección a gas directa o no, variable de si y no")
tabla_variables[39,] <- c("calefaccion", "Dummy", "Propiedad con calefacción, variable de si y no")
tabla_variables[40,] <- c("Gym", "Dummy", "Propiedad con gym, variable de si y no")
tabla_variables[41,] <- c("Air_Conditioning", "Dummy", "Propiedad con aire acondicionado, variable de si y no")
tabla_variables[42,] <- c("Solarium", "Dummy", "Propiedad con solarium, variable de si y no")



# Resultado
tabla_variables <- data.frame(tabla_variables)
gt(tabla_variables)

```
